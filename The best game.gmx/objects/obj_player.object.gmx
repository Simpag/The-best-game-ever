<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables
grav = 0.2; //Gravity amount
hsp = 0; //Set horizontal speed to 0, standing still.
vsp = 0; // Same as above but vertical
movespeed = 4; //Move speed
movedecrease = 0.9; //Move speed decrease on each frame
moveincrease = 0.3; //Move speed increase on each fram
facing = 1; //Variable to know which dir player is facing
melee_damage = 50; //Player damage / meele

//Junmp vars
jumpspeed_normal = 6; //Jump height on normal
jumpspeed_powerup =8; //Jump height when powered up

jumpspeed = jumpspeed_normal; //I coded before with jumpspeed as the variable so dnt want to chnage the other code. 

wjumpsmax = 1; //maximum of wall jumps
wjumps = 0; //Set used wall jumps to 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_player) {
    jumpspeed = jumpspeed_normal;
    sprite_index = spr_player;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//get the playerÂ´s input
key_right = keyboard_check(ord("D"));
key_left = -keyboard_check(ord("A"));
key_down = keyboard_check(ord("S"));
key_jump = keyboard_check_pressed(ord("W"));
key_melee = keyboard_check_pressed(vk_space);
key_commentme = keyboard_check(ord("V"));
key_commentme1 = keyboard_check_pressed(ord("N"));

//Cheats
if key_commentme1 == true {
    room_goto_next();
}

if key_commentme == true {
    vsp = -50;
}

//Meele
if key_melee {
    sprite_index = spr_player_melee; //change to melee animation
    image_speed = 1; //Set the animation speed
    
    with (instance_create(x,y,obj_player_melee_hitbox)) { //creates and instance and keeps the id in the statement
        image_xscale = obj_player.facing;
        with (instance_place(x,y,obj_enemy)) {
            if (hit == 0) {
                hit = 1;
                vsp = -3;
                hsp = sign(x - other.x) * 2;
                image_xscale = sign(hsp);
            }
        }
    }
    
}

//Normal ground jumping
if (place_meeting(x, y+1, obj_ground)) &amp;&amp; (key_jump) {
    vsp = -jumpspeed;
    audio_play_sound(snd_jump_player,1,0);
}

//Reseting wall jumps in the air
if (!place_meeting(x+1, y, obj_ground)) &amp;&amp; (!place_meeting(x-1, y, obj_ground)) &amp;&amp; (!place_meeting(x, y + 1, obj_ground)) {
    wjumps = wjumpsmax;
}

//Wall jump
if (key_jump) &amp;&amp; (place_meeting(x+1, y, obj_ground) || place_meeting(x-1, y, obj_ground)) &amp;&amp; (wjumps &gt; 0) {
    wjumps -= 1;
    vsp = -jumpspeed;
    audio_play_sound(snd_jump_player,1,0);
}

/*key left will be either -1 or 0 becuase the key_left = -keyboard....
Key right will be either 1 or 0 brcause the key_right = keyboar....
So its move = -1 + 0 = -1 or
move = 0 + 1 = 1 or
move = 0 + 0 = 0 or
move = -1 + 1 = 0
*/
move = key_left + key_right;

/* hsp = horizontal speed
take the move var times the movementspeed (in the create event), so movespeed * -1, 1 or 0
*/
var stop = 0.2; //temporary variable for when the player should stop

if move != 0 { //if the player is pressing a button
    hsp += move * moveincrease; //Move will be either -1 or 1, so multiply 1 or -1 by moveincrease. 
        if ((sign(hsp) == 1) &amp;&amp; (hsp &gt; movespeed)) || ((sign(hsp) == -1) &amp;&amp; (hsp &lt; -movespeed)) { //If hsp is positive and greater than movespeed, set hsp to movespeed so the player can't move faster than the move speed. Same for the other side of the ||, but its negative.
            hsp = move * movespeed; //when hsp is more than movespeed, set hsp to movespeed. Move * movespeed is to see if its to the left (-) or to the right (+).
        }
    } else {
        if (hsp != 0) { //If hsp is not equal to 0
            hsp = hsp * movedecrease; //Multiplay hsp with the move decrease speed
                if ((sign(hsp) == 1) &amp;&amp; (hsp &lt; stop)) || ((sign(hsp) == -1) &amp;&amp; (hsp &gt; -stop)) { //If hsp is positive and is less than stop, make hsp = 0. Same for after the || (or) but for the left negative variable
                        hsp = 0; //Make hsp = 0
                    }
            }
}

// if vertical speed is less than 10, add the gravity to it.
if (vsp &lt; 10) vsp += grav;

//Setting facing var
if move != 0 { //if the player is pressing a button
    facing = move 
}

//Player dir facing
image_xscale = facing;

//horizontal collision
if (place_meeting(x+hsp, y, obj_ground)){ //if the object will collide when he adds the hsp to his x cord
//sign returns 1, -1 or 0. if its 324 its 1 and -324 its -1 or 0 its 0. 
    while(!place_meeting(x+sign(hsp), y, obj_ground)) { //So if its not hitting the wall now, add either 1 or -1 to x until it hits the wall
        x += sign(hsp); //add the 1 or -1 to the x cord
    }     
    hsp = 0;  //when the while loop ends, the player hits the wall. Make the hsp = 0 so the player stops moving and dsnt go through the wall
}

//vertical collision
if (place_meeting(x, y + vsp, obj_ground)){ //if its on the ground
    while(!place_meeting(x, y + sign(vsp), obj_ground)) { //when its not on the ground
        y += sign(vsp); //same as the hs collision
    }
    vsp = 0;       
}

//Write movement code above this
x += hsp //Add the hsp to x to move the player
y += vsp //Same as the x position but with vertical speed.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ground_dead">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_death()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change back to player sprite after melee animation

if sprite_index = spr_player_melee {
    sprite_index = spr_player;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,64</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
