<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_master_volume</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>starting_x = 1000; //Starting x pos
slider_length = 350; //How long the bar should be in pixels
x = starting_x + global.effectsvolume * slider_length; // +volume is becuase when you'll save the volume it will load right
y = 700; //Y pos
grabbing = false; //If you're grabbing the button
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.isgrabbing == 0) || (global.isgrabbing == 3) {
    if (((place_meeting(x, y, cont_mouse)) &amp;&amp; (mouse_check_button(mb_any))) || (global.isgrabbing == 3)) {
        x = mouse_x;
        grabbing = true;
        global.isgrabbing = 3;
    }
}
if ((mouse_check_button_released(mb_any)) || (global.effectsvolume &gt; 1) || (global.effectsvolume &lt; 0)) global.isgrabbing = 0;

global.effectsvolume = (x - starting_x)/slider_length;

if (global.effectsvolume &lt;= 0) { x = (starting_x); global.effectsvolume = 0; }
if (global.effectsvolume &gt;= 1) { x = (starting_x + slider_length); global.effectsvolume = 1; }

//Controls Master Volume
audio_sound_gain(snd_player_lose_life,global.effectsvolume,0)
audio_sound_gain(snd_player_lose_game,global.effectsvolume,0)
audio_sound_gain(snd_player_powerup,global.effectsvolume,0)
audio_sound_gain(snd_player_jump,global.effectsvolume,0)
audio_sound_gain(snd_interactable_save_point,global.effectsvolume,0)
audio_sound_gain(snd_interactable_coin_pickup,global.effectsvolume,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_text(starting_x+(slider_length/2), 650,"Effects Volume: " + string(round(global.effectsvolume * 100)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
